import org.gradle.api.plugins.jetty.JettyRun
apply plugin: 'groovy'
apply plugin: 'jetty'
apply plugin: 'war'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'maven-publish-auth'
apply plugin: 'java'


loadConfiguration()

def loadConfiguration() {
    ext {
        try {
           environment = env
        } catch (MissingPropertyException mpe) {
            environment = "dev"
        }
    }
    def encoding = hasProperty('file.encoding') ? file.encoding : 'UTF-8'
    System.setProperty 'file.encoding', encoding
    System.setProperty 'whelk.environment', environment
}


def versionprops = new Properties()
try {
    file("src/main/resources/version.properties").withInputStream { stream ->
        versionprops.load(stream)
    }
} catch (Exception e) {}

// Version is set on deploy, but to maintain semblance of control, update default value appropriately when releasing.
version = versionprops.get("releaseTag", "0.8.15.x")

archivesBaseName = "whelk"

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'com.github.libris'

sourceSets {
    main {
        java { srcDirs = [] }
        groovy { srcDir 'src/main/' }
    }
    test {
        groovy { srcDir 'src/test/groovy/' }
    }
}

test.testLogging {
    showStandardStreams true
    exceptionFormat "full"
}

repositories {
    mavenCentral()
    maven { url "http://repository.codehaus.org/" }
    flatDir name: 'localDir', dirs: 'dep/lib'
    //maven { url "http://dev.libris.kb.se/nexus/content/groups/public/" }
}

configurations {
    executableWarDeps
}

buildscript {
  repositories {
    jcenter()
    mavenCentral()
    maven { url "http://repository.jboss.org/nexus/content/groups/public/" }
  }
  dependencies {
    classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
    classpath 'junit:junit:3.8.2'
  }
}

dependencies {
    def camelVersion = "2.14.1"
    def activeMQVersion = "5.12.1"
    def groovyVersion="2.4.4"
    def jettyVersion="8.1.16.v20140903"

    // KB dependencies
    compile 'se.kb.libris:marc:1.2.7'
    compile 'se.kb.libris.commons:isbntools:1.0'
    // Common tools
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.12'
    compile 'commons-cli:commons-cli:1.2'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.7'
    compile "com.google.guava:guava:16.0.1"
    compile 'commons-collections:commons-collections:3.2.1'
    compile "org.apache.httpcomponents:httpclient:4.3.1"
    compile "stax:stax:1.2.0"
    compile "stax:stax-api:1.0.1"
    compile 'com.damnhandy:handy-uri-templates:2.0.2'
    compile 'ch.qos.logback:logback-core:1.1.2'
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile 'org.slf4j:slf4j-api:1.7.6'
    compile 'org.slf4j:log4j-over-slf4j:1.7.6'
    compile 'org.apache.commons:commons-dbcp2:2.0.1'
    // Integration
    compile "org.elasticsearch:elasticsearch:1.4.4"
    compile "com.netflix.astyanax:astyanax-cassandra:1.56.43"
    compile "com.netflix.astyanax:astyanax-thrift:1.56.43"
    compile "org.apache.commons:commons-lang3:3.3.2"
    compile "org.apache.camel:camel-core:${camelVersion}"
    compile "org.apache.camel:camel-elasticsearch:2.15.0"
    compile "org.apache.camel:camel-jackson:${camelVersion}"
    compile "org.apache.camel:camel-http4:${camelVersion}"
    compile "org.apache.camel:camel-groovy:${camelVersion}"
    compile "org.apache.activemq:activemq-camel:${activeMQVersion}"
    compile "org.apache.activemq:activemq-broker:${activeMQVersion}"
    compile "org.apache.jena:jena-core:2.12.0"
    compile "org.apache.jena:jena-fuseki:1.1.0"
    compile "org.apache.jena:jena-tdb:1.1.0"
    compile 'com.vividsolutions:jts:1.13'
    compile 'mysql:mysql-connector-java:5.1.33'
    compile 'org.postgresql:postgresql:9.4-1200-jdbc41'
    // Standalone
    compile "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
    compile "org.eclipse.jetty:jetty-server:${jettyVersion}"
    // Servlet dependencies
    compile 'com.thetransactioncompany:cors-filter:2.1.2'
    providedCompile 'javax.servlet:servlet-api:2.5'

    // profiling and test
    testCompile "org.gperfutils:gprof:0.3.0-groovy-2.3"
    testCompile 'cglib:cglib-nodep:3.1'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'

    // Standalone
    executableWarDeps "org.eclipse.jetty:jetty-server:${jettyVersion}"
    executableWarDeps "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
    executableWarDeps "org.codehaus.groovy:groovy-all:${groovyVersion}"
    executableWarDeps 'commons-cli:commons-cli:1.2'
}

configurations {
    all*.exclude group: "org.slf4j", module: "slf4j-log4j12"
}

war {
    baseName = "whelk"

    // Prevent circular log redirection; use slf4j
    from {configurations.executableWarDeps.collect {
            //it.isDirectory() ? it : project.zipTree(it)
            it.isDirectory() ? it : project.zipTree(it).matching {
                exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
            }
        }
    }
    from "$buildDir/classes/main"

     def manifestClasspath = configurations.compile.collect { "/WEB-INF/lib/${it.getName()}" }.join(',')

    manifest {
        attributes 'Implementation-Title': 'Standalone Whelk',
        'Implementation-Version': version,
        'Main-Class': 'whelk.component.support.JettyServer',
        'Class-Path': manifestClasspath
    }


}


task(groovy, dependsOn: "classes", type: JavaExec) {
    description "Run a Groovy Script (USAGE: -Dargs=\"<script> [...]\")"
    classpath = sourceSets.test.runtimeClasspath
    main = "groovy.ui.GroovyMain"
    args(System.getProperty("args", "").split() as String[])
}

task(convertIso2709ToJson, dependsOn: 'classes', type: JavaExec) {
    description "Convert an ISO2709 file to JSON (USAGE: -Dargs='<infile>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'whelk.converter.MarcJSONConverter'
    args(System.getProperty('args', "").split() as String[])
}

task runMarcFrame(dependsOn: 'classes', type: JavaExec) {
    description "Convert a MarcJson file to JsonLD (USAGE: -Dargs='<source>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'whelk.plugin.libris.MarcFrameConverter'
    args(System.getProperty('args', "").split() as String[])
}

task jsonldToTurtle(dependsOn: 'classes', type: JavaExec) {
    description "Convert a JSON-LD file to Turtle (USAGE: -Dargs='<context> <source>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'whelk.plugin.JsonLdToTurtle'
    args(System.getProperty('args', "").split() as String[])
}
task jettyRun(type: JettyRun, overwrite: true) {
    jettyRun.contextPath = 'whelk'
    jettyRun.httpPort = 8180
    jettyRun.description = "Starts a jetty instance. (USAGE: To use a specific json-file to configure whelks, use -Dwhelk.config.uri=<URI of json file> (example: -Dwhelk.config.uri='file:etc/whelk.json'))"

    //reload = "automatic"
    //scanIntervalSeconds = 1

    def mock_cluster = java.net.InetAddress.getLocalHost().getHostName() + "-es-cluster"
    System.setProperty('elastic.cluster', System.getProperty("elastic.cluster", mock_cluster))
    System.setProperty('whelk.mode', System.getProperty("whelk.mode", "ops"))
}

task(console, dependsOn: 'classes', type: JavaExec) {
  description "Launch a Groovy Console"
  classpath = sourceSets.main.runtimeClasspath
  main = 'groovy.ui.Console'
}

publishing {
    publications {
        mavenCustom(MavenPublication) {
            groupId "se.kb.libris"
            artifactId "librisxl-whelk"
            version "${project.jar.version}"
            artifacts {
                archives jar
            }
            from components.java


            pom.withXml {
                asNode().appendNode('parent')
                .appendNode('groupId', 'se.kb.libris').parent()
                .appendNode('artifactId', 'super-pom').parent()
                .appendNode('version', '1.1')
            }

        }
    }

    repositories {
        maven {
            name "nexus"
            url "http://dev.libris.kb.se/nexus/content/repositories/internal/"
        }
    }
}
